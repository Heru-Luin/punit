#!/usr/bin/env php
<?php

// Make sure the current working directory is the project root directory
chdir(dirname(dirname(__FILE__)));

$config = getConfig();

require $config['punit']['bootstrap'];

$classes = [
    Test\App\CalcTest::class => [],
    Test\App\AssertTest::class => [],
];

fillClassMethods($config, $classes);

$stack = [];
$i = 1;
$pass = 0;
$fail = 0;

xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);

foreach($classes as $class => $methods) {
    foreach($methods as $method) {
        try {
            (new $class())->$method();
            $stack[$class][$method]['result'] = true;
            
            $pass++;
            
            echo "$i) $class::$method() --> \033[32m PASS \033[0m" . "\r\n";
        } catch(\Exception $e) {
            $stack[$class][$method]['result'] = false;
            $stack[$class][$method]['stack'] = $e;
            
            $fail++;
            
            echo "$i) $class::$method() --> \033[31m FAIL, ";
            echo "Error: ".$e->getMessage()." \033[0m ". "\r\n";
        } 
        
        $i++;         
    }   
}

echo "\r\n" . "\033[34m Tests: ".($pass+$fail)."\033[0m \033[32m Ok: $pass \033[0m \033[31m Failures: $fail \033[0m" . "\r\n";


//getCodeCoverage($classes, xdebug_get_code_coverage());
//var_dump(xdebug_get_code_coverage());
xdebug_stop_code_coverage();

//------------------------------------------
// Configuration
//------------------------------------------
function getConfig()
{
    $config = [];

    foreach (['punit.php.dist', 'punit.php'] as $fileName) {
        if (file_exists($fileName)) {
            $config = array_replace_recursive($config, require_once($fileName));
        }
    }
    return $config;
}


/**
 * Generates html report 
 * 
 * @param Array $codeCoverage Gathered information for code coverage
 *
 * @returns boolean
 */
function getCodeCoverage($classes, $codeCoverage)
{
    // @TODO Filter $codeCoverage array using namespaces keys defined in $classes array
    // @TODO Create coverage folder 
    // @TODO Create index.html containing list of class.html path links
    // @TODO Convert namespace to folder path and create coverage/path/to/class.html
    // @TODO Generate css class for every line based on flag $codeCoverage element
    /*
        li:nth-child(3) {
            background-color: #F6C6CE;
        }
    */
    
    //@TODO Generate from filtered $codeCoverage
    $indexHtml = '
<!doctype html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <title>Titre de la page</title>    
    <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
    <style>
        body {
            font-family: "courier new";
        }
        
        li.L0, li.L1, li.L2, li.L3, li.L4
        li.L5, li.L6, li.L7, li.L8, li.L9 {
          list-style-type: decimal !important;
        }
    </style>
</head>
<body>
    <ul>
        <!--<li><a href="App/Calc.html">App/Cal.html</a></li>-->
        '.$tableOfContents.'
    </ul>
</body>
</html>
    ';
    
    //@TODO save to coverage/index.html 
    
    //@TODO generate css classes for background for each line    
    foreach($filteredClasses as $namespace) {
        $notCoveredCodeCss = 'li:nth-child(3) {
            background-color: #F6C6CE;
        }';
        
        $coveredCodeCss = 'li:nth-child(7), li:nth-child(8) {
            background-color: #E6F5D0;
        }';
        
        $phpFile = '
<!doctype html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <title>Titre de la page</title>    
    <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
    <style>
        body {
            font-family: "courier new";
        }
        
        li.L0, li.L1, li.L2, li.L3, li.L4
        li.L5, li.L6, li.L7, li.L8, li.L9 {
          list-style-type: decimal !important;
        }
        
        '.$coveredCodeCss.'
        '.$notCoveredCodeCss.'
    </style>
</head>
<body>
    <a href="../index.html"><-- Retour</a>
    <pre class="prettyprint lang-php linenums">&lt;?php
'.$sourceCode.'</pre>
</body>
</html>';
        //@TODO save to coverage/App/Calc.html
    }
    
    echo "\r\n" . "\033[34m Code Coverage completed! \033[0m" . "\r\n";
}


function fillClassMethods(array $config, array &$classes)
{
    foreach ($classes as $className => &$methodNames) {
        foreach (get_class_methods($className) as $methodName) {
            if (startsWith($methodName, $config['punit']['method']['prefix'].'') &&
                endsWith($methodName, $config['punit']['method']['suffix'].'')) {
                $methodNames[] = $methodName;
            }
        }
    }
}

//------------------------------------------
// Assertions
//------------------------------------------

// Array

function assertArrayHasKey(array &$array, $key)
{
    if (!isset($array[$key]) && !array_key_exists($key, $array)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertArrayHasKeys(array &$array, array $keys)
{
    foreach ($keys as $key) {
        assertArrayHasKey($array, $key);
    }
}

function assertArrayHasSize(array $array, int $size)
{
    if (count($array) !== $size) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

// Directory

function assertDirectoryExists(string $path)
{
    if (!is_dir($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertDirectoryIsReadable(string $path)
{
    if (!is_dir($path) || !is_readable($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertDirectoryIsWritable(string $path)
{
    if (!is_dir($path) || !is_writable($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

// File

function assertFileExists(string $path)
{
    if (!is_file($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertFileEquals(string $path, string $content)
{
    if (!is_file($path) || file_get_contents($path) !== $content) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertFileIsReadable(string $path)
{
    if (!is_file($path) || !is_readable($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertFileIsWritable(string $path)
{
    if (!is_file($path) || !is_writable($path)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

// Comparaison

function assertEmpty($variable)
{
    if (!empty($variable)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertEquals($variable, $data)
{
    if ($variable !== $data) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertFalse($variable)
{
    if (false !== $variable) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertTrue($variable)
{
    if (true !== $variable) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertGreaterThan($variable, $data)
{
    if ($variable <= $data) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertGreaterThanOrEqual($variable, $data)
{
    if ($variable < $data) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

// Object

function assertInstanceOf($variable, $data)
{
    if (!($variable instanceof $data)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertNull($variable)
{
    if (null !== $variable) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertObjectHasAttribute($object, $attribute)
{
    if (!property_exists($object, $attribute)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

// String

function assertRegExp($str, $regex)
{
    if (!preg_match($regex, $str)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertStringEndsWith($str, $needle)
{
    if (!endsWith($str, $needle)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}

function assertStringStartsWith($str, $needle)
{
    if (!startsWith($str, $needle)) {
        throw new \Exception(__FUNCTION__.' failed.');
    }
}


/**
 * Checks if a string starts with $needle.
 *
 * @param string $str The string to search in.
 * @param string $needle The searched string.
 * @return bool true if $str starts with $needle, false otherwise.
 */
function startsWith(string $str, string $needle): bool
{
    return $needle === substr($str, 0, strlen($needle));
}

/**
 * Checks if a string ends with $needle.
 *
 * @param string $str The string to search in.
 * @param string $needle The searched string.
 * @return bool true if $str ends with $needle, false otherwise.
 */
function endsWith(string $str, string $needle): bool
{
    $needleLen = strlen($needle);
    return $needleLen ? $needle === substr($str, -$needleLen) : true;
}
